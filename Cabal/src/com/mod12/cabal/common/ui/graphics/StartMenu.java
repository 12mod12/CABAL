/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StartMenu.java
 *
 * Created on Oct 14, 2012, 1:58:22 PM
 */

package com.mod12.cabal.common.ui.graphics;

import java.awt.Component;
import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import com.mod12.cabal.client.ClientCabal;
import com.mod12.cabal.common.util.Graphics;
import com.mod12.cabal.server.core.ServerCabal;

/**
 *
 * @author reedh
 */
public class StartMenu extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	private final JFileChooser fc;

    /** Creates new form StartMenu */
    public StartMenu() {    	
        fc = new JFileChooser();        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Scenario Files", "sin");
        fc.setFileFilter(filter);
        this.setLocationRelativeTo(null);
        initComponents();
        Graphics.centreWindow(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        buttonNewGame = new javax.swing.JButton();
        buttonLoadGame = new javax.swing.JButton();
        buttonHostGame = new javax.swing.JButton();
        buttonJoinGame = new javax.swing.JButton();
        buttonQuit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Cantarell", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("A Game of Conspiracy and Intrigue");

        jLabel1.setFont(new java.awt.Font("Keter YG", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CABAL");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        buttonNewGame.setText("New Local Game");
        buttonNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					buttonNewGameActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        buttonLoadGame.setText("Load Game");
        buttonLoadGame.setEnabled(false);

        buttonHostGame.setText("Host Distributed Game");
        buttonHostGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					buttonHostGameActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        buttonJoinGame.setText("Join Distributed Game");
        buttonJoinGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					buttonJoinGameActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        buttonQuit.setText("Quit");
        buttonQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonQuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonHostGame, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonNewGame, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonJoinGame, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonLoadGame, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(buttonNewGame)
                .addGap(18, 18, 18)
                .addComponent(buttonHostGame)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonJoinGame)
                .addGap(18, 18, 18)
                .addComponent(buttonLoadGame)
                .addGap(18, 18, 18)
                .addComponent(buttonQuit)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonNewGameActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_buttonNewGameActionPerformed
        newGame();
    }//GEN-LAST:event_buttonNewGameActionPerformed

    private void buttonQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonQuitActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonQuitActionPerformed

    private void buttonHostGameActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_buttonHostGameActionPerformed
        hostGame();
    }//GEN-LAST:event_buttonHostGameActionPerformed

	private void buttonJoinGameActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_buttonJoinGameActionPerformed
        String ip = queryIP();
        int port = queryPort();
        String location = queryLocation();
		startClient(ip,port,false,location);
    }//GEN-LAST:event_buttonJoinGameActionPerformed

    private String queryLocation() {		
    	String result = "";
    	final JFileChooser folderc = new JFileChooser();
		folderc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = folderc.showOpenDialog(StartMenu.this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
        	File file = folderc.getSelectedFile();
        	result = file.getAbsolutePath();        	
        }				
		return result + System.getProperty("file.separator");
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonHostGame;
    private javax.swing.JButton buttonJoinGame;
    private javax.swing.JButton buttonLoadGame;
    private javax.swing.JButton buttonNewGame;
    private javax.swing.JButton buttonQuit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    private int queryPort() {
     	int result = -1;
     	String answer = this.showInputDialog(this, Message.ENTER_SERVER_PORT);
     	try{
     		result = Integer.parseInt(answer);
     	}
     	catch (Exception e) {}    		
     	
     	return result;    	
     }
    
    private String queryIP() {
    	String result = "";
    	result = this.showInputDialog(this, Message.ENTER_SERVER_IP);
    	return result;
    }
    
    private void newGame() throws Exception {
    	int returnVal = fc.showOpenDialog(StartMenu.this);
        ServerCabal serverCabal = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        	serverCabal = ServerCabal.getNewCabal(fc.getSelectedFile());
        }
        if (serverCabal != null) {
            String result = this.showInputDialog(this, Message.ENTER_HUMAN_PLAYERS);
            boolean success = true;
            int number = 0;
            try{
            	number = Integer.parseInt(result);
            }
            catch(Exception e) {
            	success = false;
            }
            if (success == true) {
            	serverCabal.setHumanPlayers(number);
            	FactionPickPopup fpp = new FactionPickPopup(serverCabal, number);
            	this.dispose();
            	fpp.setVisible(true);            	            	                               
            }                        
        }
    }
    
    private void hostGame() throws Exception {
    	int returnVal = fc.showOpenDialog(StartMenu.this);
        ServerCabal cabal = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            cabal = ServerCabal.getNewCabal(fc.getSelectedFile());                       
        }
        if (cabal != null) {
        	//cabal server has been initialized successfully
        	int result = queryPort();            
        	while (result != -1) {
        		cabal.setPort(result);
                boolean success = cabal.serverInit();  
                
                if (success) {                	
                	startClient(cabal.getipAddress(), cabal.getPortNumber(), true, cabal.getImageLocation());
                	result = -1;
                }
                else {
                	this.showMessageDialog(this, Message.FAILURE_TO_BIND_PORT);
                	result = queryPort();
                } 
        	}
        }
	}
    
    private void startClient(String serverIp, int serverPortNumber, boolean host, String location) throws Exception{
    	String result = this.showInputDialog(this, Message.ENTER_GAMER_HANDLE);    
    	if (result == null || result.isEmpty()) {
    		result = Message.NOOB_GAMER_HANDLE;
    	}
    	ClientCabal client = null;
    	try{
    		if (host == true){
    			client = new ClientCabal(result, serverIp, serverPortNumber);
    		}
    		else{
    			client = new ClientCabal(serverPortNumber, result, serverIp, serverPortNumber);
    		}
    	}
    	catch (Exception e){
    		this.showMessageDialog(this, Message.BAD_IP + serverIp + Message.BAD_PORT + serverPortNumber);
    		return;
    	}
    	client.setImageLocation(location);
    	Lobby cl = new Lobby(client, serverIp, serverPortNumber);
    	
    	client.setLobby(cl);
    	cl.setVisible(true);
    	client.requestFactionNames();
    	this.dispose();
    }
    
    public static String showInputDialog(Component frame, String message) {
    	return JOptionPane.showInputDialog(message);
    }
    
    public static void showMessageDialog(Component frame, String message) {
    	JOptionPane.showMessageDialog(frame, message);
    }
    
}

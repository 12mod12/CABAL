/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mod12.cabal.common.ui.graphics;

import java.awt.Component;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import com.mod12.cabal.client.ClientCabal;
import com.mod12.cabal.common.util.Constants;
import com.mod12.cabal.common.util.Graphics;

/**
 *
 * @author reedh
 */
public class Lobby extends javax.swing.JFrame {

	private ClientCabal client;
	private DefaultListModel lineModel;
	private List<String> availableFactions;
	private List<String> chosenFactions;
	private String selectedFaction;
	
	private String serverIP;
	private int serverPortNumber;
	
    public Lobby(ClientCabal client, String serverIp, int serverPortNumber) {
    	this.client = client;
        this.serverIP = serverIp;
        this.serverPortNumber = serverPortNumber;
        lineModel = new DefaultListModel();
    	initComponents();
    	Graphics.centreWindow(this);
    	
		buttonStart.setEnabled(false);
		if (client.gameHost()) {
			buttonLeaveGame.setEnabled(false);
		} else {
			setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		}
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaChosenFactions = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAvailableFactions = new javax.swing.JList();
        lableAvailable = new javax.swing.JLabel();
        labelChosen = new javax.swing.JLabel();
        labelAddress = new javax.swing.JLabel();
        buttonStart = new javax.swing.JButton();
        buttonSelectFaction = new javax.swing.JButton();
        labelPort = new javax.swing.JLabel();
        labelSinName = new javax.swing.JLabel();
        labelSinLocation = new javax.swing.JLabel();
        labelHost = new javax.swing.JLabel();
        labelTimePeriod = new javax.swing.JLabel();
        buttonLeaveGame = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areaChosenFactions.setColumns(20);
        areaChosenFactions.setRows(5);
        jScrollPane1.setViewportView(areaChosenFactions);

        listAvailableFactions.setModel(lineModel);
        listAvailableFactions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listAvailableFactions);

        lableAvailable.setText("Available Factions");

        labelChosen.setText("Chosen Factions");

        labelAddress.setText("Address: " + serverIP);

        buttonStart.setText("Start!");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        buttonSelectFaction.setText("Select Faction");
        buttonSelectFaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectFactionActionPerformed(evt);
            }
        });

        labelPort.setText("Port: " + serverPortNumber);

        labelSinName.setText("Scenario Name:");

        labelSinLocation.setText("Scenario Location:");

        labelHost.setText("Host:");

        labelTimePeriod.setText("Time Period: ");

        buttonLeaveGame.setText("Leave Game");
        buttonLeaveGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLeaveGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelAddress)
                    .addComponent(labelPort)
                    .addComponent(lableAvailable))
                .addGap(84, 84, 84)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonSelectFaction, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelHost)
                                    .addComponent(labelSinName)
                                    .addComponent(labelSinLocation))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(buttonLeaveGame, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                        .addGap(59, 59, 59))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelTimePeriod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelChosen))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAddress)
                    .addComponent(labelSinName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPort)
                    .addComponent(labelSinLocation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lableAvailable)
                    .addComponent(labelChosen)
                    .addComponent(labelTimePeriod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelHost)
                        .addGap(95, 95, 95)
                        .addComponent(buttonSelectFaction)
                        .addGap(28, 28, 28)
                        .addComponent(buttonLeaveGame)
                        .addGap(27, 27, 27)
                        .addComponent(buttonStart))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
    	startGame();
    }//GEN-LAST:event_buttonStartActionPerformed

    private void buttonSelectFactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectFactionActionPerformed
        selectFaction();
    }//GEN-LAST:event_buttonSelectFactionActionPerformed

    private void buttonLeaveGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLeaveGameActionPerformed
        leaveGame();
    }//GEN-LAST:event_buttonLeaveGameActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaChosenFactions;
    private javax.swing.JButton buttonLeaveGame;
    private javax.swing.JButton buttonSelectFaction;
    private javax.swing.JButton buttonStart;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelAddress;
    private javax.swing.JLabel labelChosen;
    private javax.swing.JLabel labelHost;
    private javax.swing.JLabel labelPort;
    private javax.swing.JLabel labelSinLocation;
    private javax.swing.JLabel labelSinName;
    private javax.swing.JLabel labelTimePeriod;
    private javax.swing.JLabel lableAvailable;
    private javax.swing.JList listAvailableFactions;
    // End of variables declaration//GEN-END:variables

    //takes the info in the two arrays and draws them on the window
	public void populateList() {
		lineModel.clear();
		areaChosenFactions.setText("");
		for (String faction : availableFactions){
			lineModel.add(lineModel.size(), faction);
		}		
		String output = "";
		for (String faction : chosenFactions){
			output += faction + Constants.EOL;
		}
		areaChosenFactions.setText(output);
		if (availableFactions.isEmpty() && client.gameHost()){
			buttonStart.setEnabled(true);
		} else {
			buttonStart.setEnabled(false);
		}
	}
	
	public void selectFaction() {
		selectedFaction = (String) listAvailableFactions.getSelectedValue();
		if (selectedFaction != null && !selectedFaction.isEmpty()){
			client.pickFactionRequest(selectedFaction);
		}
	}
	
	public void ownFaction(boolean success) {
		if (success) {
			chosenFactions.add(selectedFaction + Message.FACTION_HANDLE_SEPARATOR + client.getID() + Constants.EOL);
			availableFactions.remove(selectedFaction);
			this.populateList();
			this.buttonSelectFaction.setEnabled(false);
		}
		else {
			StartMenu.showMessageDialog(this, Message.FACTION_ALREADY_CHOSEN);
		}
	}
	
	public void drawScenarioInfo(String scenario, String location, String timePeriod, String host){
		labelSinName.setText("Scenario: " + scenario);
		labelSinLocation.setText("Location: " + location);
		labelHost.setText("Host: " + host);
		labelTimePeriod.setText("Time Period: " + timePeriod);
	}
	
	private void startGame() {
		client.startGame();    	
	}
	
	public void showMessageDialog(Component frame, String message) {
    	JOptionPane.showMessageDialog(frame, message);
    }
	
	public void gameStarted() {		
    	GameMenu gm = new GameMenu(client);
    	gm.setVisible(true);
    	client.setGameMenu(gm);
    	this.dispose();    	    	    	    	
	}
	
	public void setAvailableFactions(List<String> unchosen){
    	this.availableFactions = unchosen; 
    }
        
    private void leaveGame() {
    	client.deRegisterRequest();
    }
    
    public void quitGame() {
    	new StartMenu().setVisible(true);
    	this.dispose();
    }
    
    public void setChosenFactions(List<String> chosen){
    	this.chosenFactions = chosen; 
    }
    
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mod12.cabal.common.ui.graphics;


import static com.mod12.cabal.common.util.Constants.EOL;
import static com.mod12.cabal.common.util.Constants.DELIM_KEY_VALUE_PAIR;
import java.text.DecimalFormat;
import java.util.LinkedList;
import java.util.List;

import com.mod12.cabal.common.Cabal;
import com.mod12.cabal.common.util.Constants;
import com.mod12.cabal.common.util.Graphics;


/**
 *
 * @author reedh
 */
public class VictoryScreen extends javax.swing.JFrame {

    /**
     * Creates new form VictoryScreen
     * @param clientCabal 
     */
	Cabal cabal;
	
    public VictoryScreen(Cabal cabal) {
        this.cabal = cabal;
    	initComponents();
    	Graphics.centreWindow(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelWinnerIsText = new javax.swing.JLabel();
        labelWinnerFaction = new javax.swing.JLabel();
        labelTS = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        labelTextArea = new javax.swing.JTextArea();
        labelRes = new javax.swing.JLabel();
        lablePres = new javax.swing.JLabel();
        labelPresences = new javax.swing.JLabel();
        labelWinningScore = new javax.swing.JLabel();
        labelWinningName = new javax.swing.JLabel();
        labelWinningResources = new javax.swing.JLabel();
        labelWinningPresences = new javax.swing.JLabel();
        labelWinningPrestige = new javax.swing.JLabel();
        buttonQuitGame = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelWinnerIsText.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        labelWinnerIsText.setText("The Winner Is:");

        labelWinnerFaction.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        labelWinnerFaction.setText("factionname");

        labelTS.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        labelTS.setText("Total Score:");

        labelTextArea.setColumns(20);
        labelTextArea.setRows(5);
        jScrollPane1.setViewportView(labelTextArea);

        labelRes.setText("Resources:");

        lablePres.setText("Presences:");

        labelPresences.setText("Prestige:");

        labelWinningScore.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        labelWinningScore.setText("jLabel5");

        labelWinningName.setFont(new java.awt.Font("Cantarell", 0, 20)); // NOI18N
        labelWinningName.setText("username");

        labelWinningResources.setText("jLabel1");

        labelWinningPresences.setText("jLabel2");

        labelWinningPrestige.setText("jLabel3");

        buttonQuitGame.setText("Quit Game");
        buttonQuitGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonQuitGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(labelWinnerIsText))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelWinningName)
                                    .addComponent(labelWinnerFaction))))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelPresences)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelWinningPrestige))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lablePres)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelWinningPresences))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelRes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelWinningResources))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelTS)
                                .addGap(18, 18, 18)
                                .addComponent(labelWinningScore)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(239, 239, 239)
                .addComponent(buttonQuitGame, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelWinnerIsText)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTS)
                            .addComponent(labelWinningScore))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelRes)
                            .addComponent(labelWinningResources))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lablePres)
                            .addComponent(labelWinningPresences))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPresences)
                            .addComponent(labelWinningPrestige)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelWinnerFaction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelWinningName)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonQuitGame))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonQuitGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonQuitGameActionPerformed
        quitGame();
    }//GEN-LAST:event_buttonQuitGameActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonQuitGame;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelPresences;
    private javax.swing.JLabel labelRes;
    private javax.swing.JLabel labelTS;
    private javax.swing.JTextArea labelTextArea;
    private javax.swing.JLabel labelWinnerFaction;
    private javax.swing.JLabel labelWinnerIsText;
    private javax.swing.JLabel labelWinningName;
    private javax.swing.JLabel labelWinningPresences;
    private javax.swing.JLabel labelWinningPrestige;
    private javax.swing.JLabel labelWinningResources;
    private javax.swing.JLabel labelWinningScore;
    private javax.swing.JLabel lablePres;
    // End of variables declaration//GEN-END:variables
    
    // TODO figured out better way than hard coding indices in?
    public void displayResults(List<String> scoreboard){
    	DecimalFormat df = new DecimalFormat("#.##");
    	
    	boolean winnerDisplayed = false;
    	
    	int index = 0;
    	
    	List<String> factions = extractList(null, scoreboard, index);
    	index += 2;
    	
    	List<String> scores = extractList(df, scoreboard, index);
    	index++;
    	
    	List<String> presences = extractList(df, scoreboard, index);
    	index++;
    	
    	List<String> prestiges = extractList(df, scoreboard, index);
    	index++;
    	
    	List<String> resources = extractList(df, scoreboard, index);
    	index = 6;
    	
    	List<String> names;
    	if (scoreboard.get(0).split(DELIM_KEY_VALUE_PAIR).length == 7) {
        	names = extractList(null, scoreboard, index);
    	} else {
    		names = new LinkedList<String>();
    		for (int i = 0; i < resources.size(); i++) {
    			names.add("");
    		}
    	}
    	
    	displayWinner(names.get(0), factions.get(0), scores.get(0), presences.get(0), 
    			prestiges.get(0), resources.get(0));
    	
    	String output = displayTitles(names, factions, scores, presences, prestiges, resources);
    	output += EOL;
    	
    	int numOfPlayers = resources.size();
    	
    	for (int i = 1; i < numOfPlayers; i++) {
    		output += displayPlayerScore(i, names, factions, scores, presences, prestiges, resources);
    		output += EOL;
    	}
    		
    	labelTextArea.setText(output);
    }
    
	private int longestLengthName;
    private int longestLengthFaction;
    private int longestLengthScore;
    private int longestLengthPresence;
    private int longestLengthPrestige;
    private int longestLengthResource;
    private int extra = 10;
    
    private String displayTitles(List<String> names, List<String> factions, List<String> scores, 
    		List<String> presences, List<String> prestiges, List<String> resources) {
    	String toReturn = "";

    	longestLengthName = findLongestLength(names);
    	if (longestLengthName != 0) {
    		toReturn += Message.NAME;
    		toReturn += makeString(longestLengthName - Message.NAME.length() + extra, " ");
    	}
    	
    	longestLengthFaction = findLongestLength(factions);
    	toReturn += Message.FACTION;
    	toReturn += makeString(longestLengthFaction + extra - Message.FACTION.length(), " ");
    	
    	longestLengthScore = findLongestLength(scores);
    	toReturn += Message.SCORE;
    	toReturn += makeString(longestLengthScore + extra - Message.SCORE.length(), " ");
    	
    	longestLengthPresence = findLongestLength(presences);
    	toReturn += Message.PRESENCE;
    	toReturn += makeString(longestLengthPresence + extra/2 - Message.PRESENCE.length(), " ");
    	toReturn += Message.SEPARATOR;
    	toReturn += makeString(extra/2, " ");
    	    	
    	longestLengthPrestige = findLongestLength(prestiges);
    	toReturn += Message.PRESTIGE;
    	toReturn += makeString(longestLengthPrestige + extra/2 - Message.PRESTIGE.length(), " ");
    	toReturn += Message.SEPARATOR;
    	toReturn += makeString(extra/2, " ");
    	
    	longestLengthResource = findLongestLength(names);
    	toReturn += Message.RESOURCES;
    	toReturn += makeString(longestLengthPrestige - Message.RESOURCES.length(), " ");
    	
    	return toReturn;
	}
    
    private String displayPlayerScore(int index, List<String> names, List<String> factions, 
    		List<String> scores, List<String> presences, List<String> prestiges, List<String> resources) {
    	String toReturn = "";
    	
    	String temp = names.get(index);
    	toReturn += temp;
    	toReturn += makeString(longestLengthName - temp.length() + extra, " ");
    	
    	temp = factions.get(index);
    	toReturn += temp;
    	toReturn += makeString(longestLengthFaction - temp.length() + extra, " ");
    	
    	temp = scores.get(index);
    	toReturn += temp;
    	toReturn += makeString(longestLengthScore - temp.length() + extra, " ");
    	
    	temp = presences.get(index);
    	toReturn += temp;
    	toReturn += makeString(longestLengthPresence - temp.length() + extra/2, " ");
    	toReturn += Message.SEPARATOR;
    	toReturn += makeString(extra/2, " ");
    	
    	temp = prestiges.get(index);
    	toReturn += temp;
    	toReturn += makeString(longestLengthPrestige - temp.length() + extra/2, " ");
    	toReturn += Message.SEPARATOR;
    	toReturn += makeString(extra/2, " ");
    	
    	temp = resources.get(index);
    	toReturn += temp;
    	toReturn += makeString(longestLengthResource- temp.length() + extra, " ");
    	
		return toReturn;
	}
    
    private String makeString(int iterations, String string) {
    	String toReturn = "";
    	for (int i = 0; i < iterations; i++) {
    		toReturn += string;
    	}
		return toReturn;
	}

	private int findLongestLength(List<String> strings) {
		int length = 0;
		for (String string : strings) {
			if (string.length() > length) length = string.length();
		}
		return length;
	}

	private void displayWinner(String name, String faction, String score, 
    		String presence, String prestige, String resource) {
    	labelWinningName.setText(name);
    	labelWinnerFaction.setText(faction);
		labelWinningScore.setText(score);
		labelWinningPresences.setText(presence);
		labelWinningPrestige.setText(prestige);
		labelWinningResources.setText(resource);
	}

	private List<String> extractList(DecimalFormat df, List<String> scoreboard, int index) {
    	List<String> list = new LinkedList<String>();
    	for (String result : scoreboard){
    		String[] parts = result.split(DELIM_KEY_VALUE_PAIR);
    		if (df == null) {
    			list.add(parts[index]);
    		} else {
    			list.add(df.format(Double.parseDouble(parts[index])));
    		}
    	}
		return list;
	}

	private void quitGame() {
    	// TODO
    	// doesn't work because the original starting screen (CabalExec) disposed of itself
    	// so this doesn't work and Cabal will just quit
    	// might have to keep the front screen alive
    	
//    	StartMenu sm = new StartMenu();
//        sm.setVisible(true);
        this.dispose();
        cabal.quit();
    }
}

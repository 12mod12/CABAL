/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LocationMenu.java
 *
 * Created on Nov 1, 2012, 2:06:49 PM
 */

package com.mod12.cabal.common.ui.graphics;

import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;

import com.mod12.cabal.common.Cabal;
import com.mod12.cabal.common.communication.wireformats.Wireformat;
import com.mod12.cabal.common.dto.FactionPresenceDTO;
import com.mod12.cabal.common.dto.LocationDTO;
import com.mod12.cabal.common.dto.MissionConceptDTO;
import com.mod12.cabal.common.dto.StageDTO;
import com.mod12.cabal.common.util.Formatter;
import com.mod12.cabal.common.util.Graphics;
import com.mod12.cabal.common.util.Tuple;

/**
 * @author reedh
 */
public class LocationMenu extends javax.swing.JFrame {

    private DefaultListModel lineModel;
    private Cabal cabal;
    private LocationDTO currentLevel;
    private GameMenu gameMenu;

    /** Creates new form LocationMenu */
    public LocationMenu(Cabal cabal, LocationDTO topLevel, GameMenu gameMenu) {
        this.cabal = cabal;
        this.currentLevel = topLevel;
        this.gameMenu = gameMenu;
        lineModel = new DefaultListModel();
        initComponents();
        populateList();
        Graphics.centreWindow(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGoTo = new javax.swing.JButton();
        buttonMission = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listLocations = new javax.swing.JList();
        buttonGoUP = new javax.swing.JButton();
        labelCurrentLevel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaInfo = new javax.swing.JTextArea();
        buttonDown = new javax.swing.JButton();
        labelCurrLvl = new javax.swing.JLabel();
        buttonMissions = new javax.swing.JButton();
        labelDetails = new javax.swing.JLabel();
        buttonBack = new javax.swing.JButton();
        labelImage = new javax.swing.JLabel();

        buttonGoTo.setText("Go To");

        buttonMission.setText("Missions");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listLocations.setModel(lineModel);
        listLocations.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listLocationsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listLocations);

        buttonGoUP.setText("Go Up");
        buttonGoUP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGoUPActionPerformed(evt);
            }
        });

        labelCurrentLevel.setText("Current Level:");

        textAreaInfo.setColumns(20);
        textAreaInfo.setRows(5);
        jScrollPane2.setViewportView(textAreaInfo);

        buttonDown.setText("Go Down");
        buttonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDownActionPerformed(evt);
            }
        });

        labelCurrLvl.setText("currLvl");

        buttonMissions.setText("View Location Missions");
        buttonMissions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMissionsActionPerformed(evt);
            }
        });

        labelDetails.setText("Details");

        buttonBack.setText("Back");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        labelImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(136, 136, 136)
                                .addComponent(labelDetails))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonBack)
                .addGap(46, 46, 46)
                .addComponent(buttonGoUP, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(buttonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelCurrentLevel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelCurrLvl)
                .addGap(268, 268, 268))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonMissions)
                .addGap(148, 148, 148))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBack)
                    .addComponent(buttonGoUP)
                    .addComponent(buttonDown)
                    .addComponent(labelCurrentLevel)
                    .addComponent(labelCurrLvl))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(labelDetails)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(buttonMissions)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listLocationsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listLocationsValueChanged
    	displayLocationInfo();
    }//GEN-LAST:event_listLocationsValueChanged

    private void buttonMissionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMissionsActionPerformed
        pickMission();
    }//GEN-LAST:event_buttonMissionsActionPerformed

    private void buttonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDownActionPerformed
    	goDown();
        populateList();
    }//GEN-LAST:event_buttonDownActionPerformed

    private void buttonGoUPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGoUPActionPerformed
        goUp();
        populateList();
}//GEN-LAST:event_buttonGoUPActionPerformed

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        gameMenu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_buttonBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonDown;
    private javax.swing.JButton buttonGoTo;
    private javax.swing.JButton buttonGoUP;
    private javax.swing.JButton buttonMission;
    private javax.swing.JButton buttonMissions;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelCurrLvl;
    private javax.swing.JLabel labelCurrentLevel;
    private javax.swing.JLabel labelDetails;
    private javax.swing.JLabel labelImage;
    private javax.swing.JList listLocations;
    private javax.swing.JTextArea textAreaInfo;
    // End of variables declaration//GEN-END:variables

    private void goDown() {
    	currentLevel = cabal.getLocationDTO((String) listLocations.getSelectedValue());
    }
    
    private void goUp() {
        currentLevel = cabal.getLocationDTO(currentLevel.getParent());
    }
    
    private void populateList() {
    	clearImage();
        labelCurrLvl.setText(currentLevel.getName());
        lineModel.clear();
        for (String location : currentLevel.getChildren()) {
            lineModel.add(lineModel.size(), location);
        }
        buttonDown.setEnabled(false);
        buttonMissions.setEnabled(false);
        if (currentLevel.getParent() == null || currentLevel.getParent().isEmpty() || 
        		currentLevel.getParent().equals(Wireformat.NULL)) {
            buttonGoUP.setEnabled(false);
        }
        else{
        	buttonGoUP.setEnabled(true);
        }
    }
    
    private void drawImage(String type) {
    	//System.out.println(cabal.getImageLocation() + type + Message.IMAGE_EXTENSION);
    	ImageIcon image = new ImageIcon(cabal.getImageLocation() + type + Message.IMAGE_EXTENSION);
    	labelImage.setIcon(image);
    }
    
    private void clearImage() {
    	labelImage.setIcon(null);
    }

    private void updateDescription(LocationDTO location) {
        List<FactionPresenceDTO> list = cabal.getFactionPresences(location.getName());
        String result = "";
        for (FactionPresenceDTO fp : list) {
            result  += fp.getFaction() + ": " + Formatter.format(2, fp.getPresence()) + "\n";
        }
        textAreaInfo.setText(result);
    }
    
    private void pickMission() {
    	StageDTO stageDTO = (StageDTO) cabal.getLocationDTO((String) listLocations.getSelectedValue());
    	MissionMenu missionMenu = new MissionMenu(cabal, gameMenu, this, stageDTO);
        missionMenu.setVisible(true);
        this.setVisible(false);
    }
    
    private void displayLocationInfo() {
    	String childName = (String) listLocations.getSelectedValue();
        clearImage();
        
    	if (childName != null) {
    		LocationDTO location = cabal.getLocationDTO(childName);
    		
	        if (location.getChildren().size() > 0) {
	            buttonDown.setEnabled(true);
	        }
	        else {
	        	buttonDown.setEnabled(false);
	        }
	        
	        String type = location.getType().toUpperCase();
	        drawImage(type);	        
	        if (location instanceof StageDTO) {
	            StageDTO temp = (StageDTO) location;
	            List<String> possibleMissions = temp.getPossibleMissions();
	            removeMissionsThatRequireTargetInDominatedStage(temp, possibleMissions);
	            
				if (possibleMissions.size() > 0 && gameMenu.myTurn()) {
	                buttonMissions.setEnabled(true);
	            }
	            else {
	            	buttonMissions.setEnabled(false);
	            }
	        }
	        else {
	        	buttonMissions.setEnabled(false);
	        }
	        
        	updateDescription(location);
	    }
    	else if (childName == null) {
            buttonDown.setEnabled(false);
            buttonMissions.setEnabled(false);
            textAreaInfo.setText("");
        }
    }

    /**
     * removes missions that require a target only when the stage is owned 100% by the faction
     * who is turn it is
     * @param possibleMissions
     */
	private void removeMissionsThatRequireTargetInDominatedStage(StageDTO stage, List<String> possibleMissions) {
		List<MissionConceptDTO> missionsInStage = cabal.getMissions(possibleMissions);
		for (MissionConceptDTO mission : missionsInStage) {
			if (mission.requiresTarget()) {
				List<Tuple<String, Double>> fp = stage.getFactionPresences();
				// if there is only 1 FP and it is equal to the faction who's turn it is
				if (fp.size() == 1 && fp.get(0).x.equals(cabal.getCurrentStepFaction().getName())) {
					possibleMissions.remove(mission.getName());
				}
			}
		}
	}
    
}
